// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// parse_request
List parse_request(String req, bool headers_lowercase);
RcppExport SEXP _construe_parse_request(SEXP reqSEXP, SEXP headers_lowercaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type req(reqSEXP);
    Rcpp::traits::input_parameter< bool >::type headers_lowercase(headers_lowercaseSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_request(req, headers_lowercase));
    return rcpp_result_gen;
END_RCPP
}
// parse_request_raw
List parse_request_raw(RawVector req, bool headers_lowercase);
RcppExport SEXP _construe_parse_request_raw(SEXP reqSEXP, SEXP headers_lowercaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawVector >::type req(reqSEXP);
    Rcpp::traits::input_parameter< bool >::type headers_lowercase(headers_lowercaseSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_request_raw(req, headers_lowercase));
    return rcpp_result_gen;
END_RCPP
}
// parse_response
List parse_response(String resp, bool headers_lowercase);
RcppExport SEXP _construe_parse_response(SEXP respSEXP, SEXP headers_lowercaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type resp(respSEXP);
    Rcpp::traits::input_parameter< bool >::type headers_lowercase(headers_lowercaseSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_response(resp, headers_lowercase));
    return rcpp_result_gen;
END_RCPP
}
// parse_response_raw
List parse_response_raw(RawVector resp, bool headers_lowercase);
RcppExport SEXP _construe_parse_response_raw(SEXP respSEXP, SEXP headers_lowercaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RawVector >::type resp(respSEXP);
    Rcpp::traits::input_parameter< bool >::type headers_lowercase(headers_lowercaseSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_response_raw(resp, headers_lowercase));
    return rcpp_result_gen;
END_RCPP
}
// parse_url
DataFrame parse_url(std::vector < std::string > urls);
RcppExport SEXP _construe_parse_url(SEXP urlsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector < std::string > >::type urls(urlsSEXP);
    rcpp_result_gen = Rcpp::wrap(parse_url(urls));
    return rcpp_result_gen;
END_RCPP
}
// read_file_raw
RawVector read_file_raw(CharacterVector fil, int buffer_size);
RcppExport SEXP _construe_read_file_raw(SEXP filSEXP, SEXP buffer_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type fil(filSEXP);
    Rcpp::traits::input_parameter< int >::type buffer_size(buffer_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(read_file_raw(fil, buffer_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_construe_parse_request", (DL_FUNC) &_construe_parse_request, 2},
    {"_construe_parse_request_raw", (DL_FUNC) &_construe_parse_request_raw, 2},
    {"_construe_parse_response", (DL_FUNC) &_construe_parse_response, 2},
    {"_construe_parse_response_raw", (DL_FUNC) &_construe_parse_response_raw, 2},
    {"_construe_parse_url", (DL_FUNC) &_construe_parse_url, 1},
    {"_construe_read_file_raw", (DL_FUNC) &_construe_read_file_raw, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_construe(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
